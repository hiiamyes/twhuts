// Generated by CoffeeScript 1.9.2
(function() {
  var async, cheerio, collectionName, hutCrawlerSheiPa, hutCrawlerTaiwanForestRecreation, hutCrawlerTaroko, hutCrawlerYushan, moment, reCrawlTime, request;

  async = require('async');

  moment = require('moment');

  request = require('request');

  cheerio = require('cheerio');

  hutCrawlerTaiwanForestRecreation = require('./hutCrawlerTaiwanForestRecreation.js');

  hutCrawlerYushan = require('./hutCrawlerYushan.js');

  collectionName = 'huts';

  reCrawlTime = 1 * 60 * 60 * 1000;

  module.exports = {
    crawl: function(MongoClient, mongoServerUrl) {
      var crawlOnce;
      return (crawlOnce = function() {
        var timeStartCrawling;
        console.log('huts crawling start');
        timeStartCrawling = moment();
        MongoClient.connect(mongoServerUrl, function(err, db) {
          var huts;
          huts = db.collection(collectionName);
          return huts.find().toArray(function(err, docs) {
            return async.each(docs, function(hut, cbAsync) {
              return async.waterfall([
                function(cb) {
                  switch (hut.admin) {
                    case '台灣山林悠遊網':
                      return hutCrawlerTaiwanForestRecreation.crawl(hut.url, cb);
                    case '雪霸國家公園':
                      return hutCrawlerSheiPa(hut.url, cb);
                    case '太魯閣國家公園':
                      return hutCrawlerTaroko(hut.url, cb);
                    case '玉山國家公園':
                      return hutCrawlerYushan.crawl(hut, cb);
                    case '南投林區管理處':
                      return cb(null, []);
                  }
                }, function(capacityStatus, cb) {
                  return huts.updateOne({
                    'nameZh': hut.nameZh
                  }, {
                    $set: {
                      'capacityStatuses': {
                        'dateCrawl': moment().format(),
                        'status': capacityStatus
                      }
                    }
                  }, function(err, r) {
                    console.log(err !== null ? err : 'success crawling ' + hut.nameZh);
                    return cb(null, 'done');
                  });
                }
              ], function(err, result) {
                return cbAsync();
              });
            }, function(err) {
              console.log(err != null ? err : 'huts crawling done');
              return console.log(moment().format() + ': ' + moment().diff(timeStartCrawling, 'seconds') + 's');
            });
          });
        });
        return setTimeout(crawlOnce, reCrawlTime);
      })();
    }
  };

  hutCrawlerSheiPa = function(url, cb) {
    return request(url, function(err, res, body) {
      var $, capacityStatus;
      capacityStatus = [];
      $ = cheerio.load(body);
      $('table.TABLE2 tr').each(function(i) {
        if (i >= 2 && $(this).find('td:nth-child(1)').text() !== '') {
          return capacityStatus.push({
            'date': moment($(this).find('td:nth-child(1)').text(), 'YYYY-MM-DD').format(),
            'remaining': $(this).find('td:nth-child(4)').text(),
            'applying': $(this).find('td:nth-child(5)').text(),
            'waiting': $(this).find('td:nth-child(6)').text()
          });
        }
      });
      return cb(null, capacityStatus);
    });
  };

  hutCrawlerTaroko = function(url, cb) {
    return request(url, function(err, res, body) {
      var $, capacityStatus;
      capacityStatus = [];
      $ = cheerio.load(body);
      $('table tr').each(function(i) {
        var applying, applyingString, day, month, year;
        if (i > 0) {
          applyingString = $(this).find('td:nth-child(2)').text();
          applying = applyingString === '------' ? 0 : applyingString.split('隊')[1].split('人')[0];
          year = parseInt($(this).find('td:nth-child(1)').text().substring(0, 3)) + 1911;
          month = $(this).find('td:nth-child(1)').text().substring(4, 6);
          day = $(this).find('td:nth-child(1)').text().substring(7, 9);
          return capacityStatus.push({
            'date': moment(year + ' ' + month + ' ' + day, 'YYYY MM DD').format(),
            'remaining': $(this).find('td:nth-child(4)').text(),
            'applying': applying,
            'waiting': null
          });
        }
      });
      return cb(null, capacityStatus);
    });
  };

}).call(this);
