// Generated by CoffeeScript 1.9.2
(function() {
  var MongoClient, app, async, collectionName, crawler, env, express, favicon, mongoServerUrl, port;

  express = require('express');

  async = require('async');

  favicon = require('serve-favicon');

  require('newrelic');

  app = express();

  app.use(favicon(__dirname + '/favicon.ico'));

  app.set('view engine', 'jade');

  app.set('views', __dirname + '/');

  app.use(express["static"](__dirname + '/'));

  env = process.env.NODE_ENV || 'development';

  if (env === 'development') {
    collectionName = 'huts_dev';
  } else if (env === 'production') {
    collectionName = 'huts';
  }

  console.log('mode: ' + env);

  MongoClient = require('mongodb').MongoClient;

  mongoServerUrl = 'mongodb://yes:yes@ds035280.mongolab.com:35280/hiking';

  crawler = require('./hut/scripts/crawler.js');

  crawler.crawl(MongoClient, mongoServerUrl, collectionName);

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.get('/hut/views/:name', function(req, res) {
    return res.render('hut/views/' + req.params.name);
  });

  app.get('/hut', function(req, res) {
    return res.render('hut/views/index');
  });

  app.get('/comic', function(req, res) {
    return res.render('comic/views/index');
  });

  app.get('/d3_demo', function(req, res) {
    return res.render('d3_demo/index');
  });

  app.get('/api/hut', function(req, res) {
    return MongoClient.connect(mongoServerUrl, function(err, db) {
      return async.parallel({
        hutGroups: function(cb) {
          return db.collection(collectionName).aggregate([
            {
              $match: {
                isApplicable: {
                  $eq: true
                }
              }
            }, {
              $sort: {
                nameZh: 1
              }
            }, {
              $group: {
                _id: {
                  admin: '$admin'
                },
                hutNameZhs: {
                  $push: '$nameZh'
                }
              }
            }
          ], function(err, result) {
            return cb(null, result);
          });
        },
        huts: function(cb) {
          return db.collection(collectionName).find().toArray(function(err, docs) {
            return cb(null, docs);
          });
        }
      }, function(err, results) {
        return res.status(200).send({
          'hutGroups': results.hutGroups,
          'huts': results.huts
        });
      });
    });
  });

  port = Number(process.env.PORT || 8080);

  app.listen(port, function() {
    return console.log('Listening on ' + port);
  });

}).call(this);
